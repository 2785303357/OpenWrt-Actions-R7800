#=================================================
# https://github.com/ClayMoreBoy/OpenWrt-Actions-R7800
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: ClayMoreBoy
# Github: https://github.com/ClayMoreBoy
#=================================================

name: OpenWrt-R7800-Lean(固件)

on:
# 定时触发
  schedule:
    - cron: 0 01 * * *

# release触发
#  release:
#    types: [published]

# 点赞触发
  watch:
    types: [started]

# 编辑触发
#  push:
#    branches: 
#       - master

# config触发
#  paths:
#    - 'x86_64.config'

#FREE_UP_DISK 释放磁盘空间
#SSH_ACTIONS 开启SSH连接
#UPLOAD_BIN_DIR上传BIN目录
#UPLOAD_FIRMWARE上传固件目录

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  DIY_SH: OpenWrt-R7800-Lean.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  TARGET: ipq806x
  SUBTARGET: generic
  DEVICE: openwrt-ipq806x-netgear_r7800
  UPLOAD_TMP_LINK: true
  DOWNLOAD_URL_FILE: Tmp-Link-Url.txt
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest

    steps:
    - name: 校验本地文件
      uses: actions/checkout@master

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo apt-get -y install asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache flex g++ gawk gcc gcc-multilib gettext git git-core help2man htop lib32gcc1 libc6-dev-i386 libglib2.0-dev libncurses5-dev libssl-dev libtool libz-dev libelf-dev make msmtp ncurses-term ocaml-nox p7zip p7zip-full patch qemu-utils sharutils subversion texinfo uglifyjs unzip upx xmlto yui-compressor zlib1g-dev make cmake device-tree-compiler  g++-multilib  python3.5
        curl -fsSL https://github.com/ClayMoreBoy/dotfiles/raw/master/.bashrc >> ~/.bashrc

    - name: 释放磁盘空间
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: 克隆源代码
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: 更新源
      working-directory: ./openwrt
      run:  |
        echo "src-git lienol https://github.com/Lienol/openwrt-package" >> feeds.conf.default && cat feeds.conf.default
        ./scripts/feeds clean
        ./scripts/feeds update -a
        rm -rf feeds/lienol/lienol/v2ray
        rm -rf feeds/lienol/lienol/openssl1.1
        rm -rf feeds/lienol/lienol/trojan
        rm -rf feeds/lienol/lienol/ipt2socks
        rm -rf feeds/lienol/lienol/shadowsocks-libev-new
        rm -rf feeds/lienol/lienol/shadowsocksr-libev
        rm -rf feeds/lienol/lienol/pdnsd-alt
        rm -rf feeds/lienol/package/verysync
        rm -rf feeds/lienol/lienol/luci-app-verysync
        rm -rf package/lean/kcptun
        rm -rf package/lean/luci-app-kodexplorer
        rm -rf package/lean/luci-app-pppoe-relay
        rm -rf package/lean/luci-app-pptp-server
        rm -rf package/lean/luci-app-v2ray-server

    - name: 安装源
      working-directory: ./openwrt
      run:  ./scripts/feeds install -a

    - name: 创建自定义配置文件 - OpenWrt-R7800
      run: |
        [ -e files ] && mv files openwrt/files
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        make defconfig

    - name: 开启SSH远程连接
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: 下载软件包
      working-directory: ./openwrt
      id: package
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      working-directory: ./openwrt
      id: compile
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: 提取日期
      run: |
        date=$(date +%Y-%m-%d)
        echo "::set-env name=DATE::$date"
        
    - name: 上传配置文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: config.seed
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.seed
    
    - name: 上传包
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: packages
        path: openwrt/bin/packages

    - name: 上传内核包
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: kernel-packages
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/packages
        
    - name: 上传官方镜像
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-factory.img
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-factory.img
    
    - name: 上传系统升级镜像
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-sysupgrade.bin
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-sysupgrade.bin
    
    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums
    
    - name: Upload Files To Tmp.Link
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_TMP_LINK == 'true'
      run: |
        cd openwrt/bin/packages
        zip -q -r ../targets/$TARGET/$SUBTARGET/packages.zip *
        cd ../targets/$TARGET/$SUBTARGET
        zip -q -r kernel-packages.zip packages
        find . -maxdepth 1 ! -name "$DOWNLOAD_URL_FILE" -type f -exec echo {} >> $DOWNLOAD_URL_FILE \; -exec curl -k -F "file=@{}" -F "token=${{ secrets.TMP_LINK_TOKEN }}" -F "model=3" -X POST "https://connect.tmp.link/api_v2/cli_uploader" -s >> $DOWNLOAD_URL_FILE \;
        sed -i 's/\.\///g' $DOWNLOAD_URL_FILE
        sed -i '/^Upload.*/d' $DOWNLOAD_URL_FILE
        sed -i '/^Thank.*/d' $DOWNLOAD_URL_FILE
        sed -i '/Download/G' $DOWNLOAD_URL_FILE
    - name: Upload Download Url File
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_TMP_LINK == 'true'
      with:
        name: ${{ env.DOWNLOAD_URL_FILE }}
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DOWNLOAD_URL_FILE }}
    
    - name: 微信通知
      run: curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=R7800_Lean_${{ env.DATE }}固件编译完成
